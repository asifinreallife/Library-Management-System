#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace csharpproject
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="project1")]
	public partial class DataClasses1DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertADMIN(ADMIN instance);
    partial void UpdateADMIN(ADMIN instance);
    partial void DeleteADMIN(ADMIN instance);
    partial void InsertUSER(USER instance);
    partial void UpdateUSER(USER instance);
    partial void DeleteUSER(USER instance);
    partial void InsertAUTHOR(AUTHOR instance);
    partial void UpdateAUTHOR(AUTHOR instance);
    partial void DeleteAUTHOR(AUTHOR instance);
    partial void InsertAWAITING_CONFIRMATION(AWAITING_CONFIRMATION instance);
    partial void UpdateAWAITING_CONFIRMATION(AWAITING_CONFIRMATION instance);
    partial void DeleteAWAITING_CONFIRMATION(AWAITING_CONFIRMATION instance);
    partial void InsertBOOK(BOOK instance);
    partial void UpdateBOOK(BOOK instance);
    partial void DeleteBOOK(BOOK instance);
    partial void InsertBOOK_AUTHOR(BOOK_AUTHOR instance);
    partial void UpdateBOOK_AUTHOR(BOOK_AUTHOR instance);
    partial void DeleteBOOK_AUTHOR(BOOK_AUTHOR instance);
    partial void InsertGENRE(GENRE instance);
    partial void UpdateGENRE(GENRE instance);
    partial void DeleteGENRE(GENRE instance);
    partial void InsertPUBLISHER(PUBLISHER instance);
    partial void UpdatePUBLISHER(PUBLISHER instance);
    partial void DeletePUBLISHER(PUBLISHER instance);
    #endregion
		
		public DataClasses1DataContext() : 
				base(global::csharpproject.Properties.Settings.Default.project1ConnectionString2, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<ADMIN> ADMINs
		{
			get
			{
				return this.GetTable<ADMIN>();
			}
		}
		
		public System.Data.Linq.Table<USER> USERs
		{
			get
			{
				return this.GetTable<USER>();
			}
		}
		
		public System.Data.Linq.Table<AUTHOR> AUTHORs
		{
			get
			{
				return this.GetTable<AUTHOR>();
			}
		}
		
		public System.Data.Linq.Table<AWAITING_CONFIRMATION> AWAITING_CONFIRMATIONs
		{
			get
			{
				return this.GetTable<AWAITING_CONFIRMATION>();
			}
		}
		
		public System.Data.Linq.Table<BOOK> BOOKs
		{
			get
			{
				return this.GetTable<BOOK>();
			}
		}
		
		public System.Data.Linq.Table<BOOK_AUTHOR> BOOK_AUTHORs
		{
			get
			{
				return this.GetTable<BOOK_AUTHOR>();
			}
		}
		
		public System.Data.Linq.Table<GENRE> GENREs
		{
			get
			{
				return this.GetTable<GENRE>();
			}
		}
		
		public System.Data.Linq.Table<PUBLISHER> PUBLISHERs
		{
			get
			{
				return this.GetTable<PUBLISHER>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ADMIN")]
	public partial class ADMIN : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Admin_Name;
		
		private string _Admin_Password;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnAdmin_NameChanging(string value);
    partial void OnAdmin_NameChanged();
    partial void OnAdmin_PasswordChanging(string value);
    partial void OnAdmin_PasswordChanged();
    #endregion
		
		public ADMIN()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Admin_Name", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Admin_Name
		{
			get
			{
				return this._Admin_Name;
			}
			set
			{
				if ((this._Admin_Name != value))
				{
					this.OnAdmin_NameChanging(value);
					this.SendPropertyChanging();
					this._Admin_Name = value;
					this.SendPropertyChanged("Admin_Name");
					this.OnAdmin_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Admin_Password", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Admin_Password
		{
			get
			{
				return this._Admin_Password;
			}
			set
			{
				if ((this._Admin_Password != value))
				{
					this.OnAdmin_PasswordChanging(value);
					this.SendPropertyChanging();
					this._Admin_Password = value;
					this.SendPropertyChanged("Admin_Password");
					this.OnAdmin_PasswordChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[USER]")]
	public partial class USER : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _User_Name;
		
		private string _User_Password;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnUser_NameChanging(string value);
    partial void OnUser_NameChanged();
    partial void OnUser_PasswordChanging(string value);
    partial void OnUser_PasswordChanged();
    #endregion
		
		public USER()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_User_Name", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string User_Name
		{
			get
			{
				return this._User_Name;
			}
			set
			{
				if ((this._User_Name != value))
				{
					this.OnUser_NameChanging(value);
					this.SendPropertyChanging();
					this._User_Name = value;
					this.SendPropertyChanged("User_Name");
					this.OnUser_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_User_Password", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string User_Password
		{
			get
			{
				return this._User_Password;
			}
			set
			{
				if ((this._User_Password != value))
				{
					this.OnUser_PasswordChanging(value);
					this.SendPropertyChanging();
					this._User_Password = value;
					this.SendPropertyChanged("User_Password");
					this.OnUser_PasswordChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AUTHOR")]
	public partial class AUTHOR : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Author_ID;
		
		private string _Author_Name;
		
		private EntitySet<BOOK_AUTHOR> _BOOK_AUTHORs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAuthor_IDChanging(int value);
    partial void OnAuthor_IDChanged();
    partial void OnAuthor_NameChanging(string value);
    partial void OnAuthor_NameChanged();
    #endregion
		
		public AUTHOR()
		{
			this._BOOK_AUTHORs = new EntitySet<BOOK_AUTHOR>(new Action<BOOK_AUTHOR>(this.attach_BOOK_AUTHORs), new Action<BOOK_AUTHOR>(this.detach_BOOK_AUTHORs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Author_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Author_ID
		{
			get
			{
				return this._Author_ID;
			}
			set
			{
				if ((this._Author_ID != value))
				{
					this.OnAuthor_IDChanging(value);
					this.SendPropertyChanging();
					this._Author_ID = value;
					this.SendPropertyChanged("Author_ID");
					this.OnAuthor_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Author_Name", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Author_Name
		{
			get
			{
				return this._Author_Name;
			}
			set
			{
				if ((this._Author_Name != value))
				{
					this.OnAuthor_NameChanging(value);
					this.SendPropertyChanging();
					this._Author_Name = value;
					this.SendPropertyChanged("Author_Name");
					this.OnAuthor_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AUTHOR_BOOK_AUTHOR", Storage="_BOOK_AUTHORs", ThisKey="Author_ID", OtherKey="Author_ID")]
		public EntitySet<BOOK_AUTHOR> BOOK_AUTHORs
		{
			get
			{
				return this._BOOK_AUTHORs;
			}
			set
			{
				this._BOOK_AUTHORs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BOOK_AUTHORs(BOOK_AUTHOR entity)
		{
			this.SendPropertyChanging();
			entity.AUTHOR = this;
		}
		
		private void detach_BOOK_AUTHORs(BOOK_AUTHOR entity)
		{
			this.SendPropertyChanging();
			entity.AUTHOR = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AWAITING_CONFIRMATION")]
	public partial class AWAITING_CONFIRMATION : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private string _Password;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    #endregion
		
		public AWAITING_CONFIRMATION()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BOOK")]
	public partial class BOOK : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Book_ID;
		
		private string _Book_Name;
		
		private double _Book_Price;
		
		private string _Availability;
		
		private string _Language;
		
		private long _Publish_Year;
		
		private int _Publisher_ID;
		
		private int _Genre_ID;
		
		private string _Genre_Name;
		
		private string _Author_Name;
		
		private string _Publisher_Name;
		
		private string _Publisher_Address;
		
		private EntitySet<BOOK_AUTHOR> _BOOK_AUTHORs;
		
		private EntityRef<GENRE> _GENRE;
		
		private EntityRef<PUBLISHER> _PUBLISHER;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBook_IDChanging(int value);
    partial void OnBook_IDChanged();
    partial void OnBook_NameChanging(string value);
    partial void OnBook_NameChanged();
    partial void OnBook_PriceChanging(double value);
    partial void OnBook_PriceChanged();
    partial void OnAvailabilityChanging(string value);
    partial void OnAvailabilityChanged();
    partial void OnLanguageChanging(string value);
    partial void OnLanguageChanged();
    partial void OnPublish_YearChanging(long value);
    partial void OnPublish_YearChanged();
    partial void OnPublisher_IDChanging(int value);
    partial void OnPublisher_IDChanged();
    partial void OnGenre_IDChanging(int value);
    partial void OnGenre_IDChanged();
    partial void OnGenre_NameChanging(string value);
    partial void OnGenre_NameChanged();
    partial void OnAuthor_NameChanging(string value);
    partial void OnAuthor_NameChanged();
    partial void OnPublisher_NameChanging(string value);
    partial void OnPublisher_NameChanged();
    partial void OnPublisher_AddressChanging(string value);
    partial void OnPublisher_AddressChanged();
    #endregion
		
		public BOOK()
		{
			this._BOOK_AUTHORs = new EntitySet<BOOK_AUTHOR>(new Action<BOOK_AUTHOR>(this.attach_BOOK_AUTHORs), new Action<BOOK_AUTHOR>(this.detach_BOOK_AUTHORs));
			this._GENRE = default(EntityRef<GENRE>);
			this._PUBLISHER = default(EntityRef<PUBLISHER>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Book_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Book_ID
		{
			get
			{
				return this._Book_ID;
			}
			set
			{
				if ((this._Book_ID != value))
				{
					this.OnBook_IDChanging(value);
					this.SendPropertyChanging();
					this._Book_ID = value;
					this.SendPropertyChanged("Book_ID");
					this.OnBook_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Book_Name", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Book_Name
		{
			get
			{
				return this._Book_Name;
			}
			set
			{
				if ((this._Book_Name != value))
				{
					this.OnBook_NameChanging(value);
					this.SendPropertyChanging();
					this._Book_Name = value;
					this.SendPropertyChanged("Book_Name");
					this.OnBook_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Book_Price", DbType="Float NOT NULL")]
		public double Book_Price
		{
			get
			{
				return this._Book_Price;
			}
			set
			{
				if ((this._Book_Price != value))
				{
					this.OnBook_PriceChanging(value);
					this.SendPropertyChanging();
					this._Book_Price = value;
					this.SendPropertyChanged("Book_Price");
					this.OnBook_PriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Availability", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Availability
		{
			get
			{
				return this._Availability;
			}
			set
			{
				if ((this._Availability != value))
				{
					this.OnAvailabilityChanging(value);
					this.SendPropertyChanging();
					this._Availability = value;
					this.SendPropertyChanged("Availability");
					this.OnAvailabilityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Language", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Language
		{
			get
			{
				return this._Language;
			}
			set
			{
				if ((this._Language != value))
				{
					this.OnLanguageChanging(value);
					this.SendPropertyChanging();
					this._Language = value;
					this.SendPropertyChanged("Language");
					this.OnLanguageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Publish_Year", DbType="BigInt NOT NULL")]
		public long Publish_Year
		{
			get
			{
				return this._Publish_Year;
			}
			set
			{
				if ((this._Publish_Year != value))
				{
					this.OnPublish_YearChanging(value);
					this.SendPropertyChanging();
					this._Publish_Year = value;
					this.SendPropertyChanged("Publish_Year");
					this.OnPublish_YearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Publisher_ID", DbType="Int NOT NULL")]
		public int Publisher_ID
		{
			get
			{
				return this._Publisher_ID;
			}
			set
			{
				if ((this._Publisher_ID != value))
				{
					if (this._PUBLISHER.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPublisher_IDChanging(value);
					this.SendPropertyChanging();
					this._Publisher_ID = value;
					this.SendPropertyChanged("Publisher_ID");
					this.OnPublisher_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Genre_ID", DbType="Int NOT NULL")]
		public int Genre_ID
		{
			get
			{
				return this._Genre_ID;
			}
			set
			{
				if ((this._Genre_ID != value))
				{
					if (this._GENRE.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGenre_IDChanging(value);
					this.SendPropertyChanging();
					this._Genre_ID = value;
					this.SendPropertyChanged("Genre_ID");
					this.OnGenre_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Genre_Name", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Genre_Name
		{
			get
			{
				return this._Genre_Name;
			}
			set
			{
				if ((this._Genre_Name != value))
				{
					this.OnGenre_NameChanging(value);
					this.SendPropertyChanging();
					this._Genre_Name = value;
					this.SendPropertyChanged("Genre_Name");
					this.OnGenre_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Author_Name", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Author_Name
		{
			get
			{
				return this._Author_Name;
			}
			set
			{
				if ((this._Author_Name != value))
				{
					this.OnAuthor_NameChanging(value);
					this.SendPropertyChanging();
					this._Author_Name = value;
					this.SendPropertyChanged("Author_Name");
					this.OnAuthor_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Publisher_Name", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Publisher_Name
		{
			get
			{
				return this._Publisher_Name;
			}
			set
			{
				if ((this._Publisher_Name != value))
				{
					this.OnPublisher_NameChanging(value);
					this.SendPropertyChanging();
					this._Publisher_Name = value;
					this.SendPropertyChanged("Publisher_Name");
					this.OnPublisher_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Publisher_Address", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Publisher_Address
		{
			get
			{
				return this._Publisher_Address;
			}
			set
			{
				if ((this._Publisher_Address != value))
				{
					this.OnPublisher_AddressChanging(value);
					this.SendPropertyChanging();
					this._Publisher_Address = value;
					this.SendPropertyChanged("Publisher_Address");
					this.OnPublisher_AddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BOOK_BOOK_AUTHOR", Storage="_BOOK_AUTHORs", ThisKey="Book_ID", OtherKey="Book_ID")]
		public EntitySet<BOOK_AUTHOR> BOOK_AUTHORs
		{
			get
			{
				return this._BOOK_AUTHORs;
			}
			set
			{
				this._BOOK_AUTHORs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GENRE_BOOK", Storage="_GENRE", ThisKey="Genre_ID", OtherKey="Genre_ID", IsForeignKey=true)]
		public GENRE GENRE
		{
			get
			{
				return this._GENRE.Entity;
			}
			set
			{
				GENRE previousValue = this._GENRE.Entity;
				if (((previousValue != value) 
							|| (this._GENRE.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GENRE.Entity = null;
						previousValue.BOOKs.Remove(this);
					}
					this._GENRE.Entity = value;
					if ((value != null))
					{
						value.BOOKs.Add(this);
						this._Genre_ID = value.Genre_ID;
					}
					else
					{
						this._Genre_ID = default(int);
					}
					this.SendPropertyChanged("GENRE");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PUBLISHER_BOOK", Storage="_PUBLISHER", ThisKey="Publisher_ID", OtherKey="Publisher_ID", IsForeignKey=true)]
		public PUBLISHER PUBLISHER
		{
			get
			{
				return this._PUBLISHER.Entity;
			}
			set
			{
				PUBLISHER previousValue = this._PUBLISHER.Entity;
				if (((previousValue != value) 
							|| (this._PUBLISHER.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PUBLISHER.Entity = null;
						previousValue.BOOKs.Remove(this);
					}
					this._PUBLISHER.Entity = value;
					if ((value != null))
					{
						value.BOOKs.Add(this);
						this._Publisher_ID = value.Publisher_ID;
					}
					else
					{
						this._Publisher_ID = default(int);
					}
					this.SendPropertyChanged("PUBLISHER");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BOOK_AUTHORs(BOOK_AUTHOR entity)
		{
			this.SendPropertyChanging();
			entity.BOOK = this;
		}
		
		private void detach_BOOK_AUTHORs(BOOK_AUTHOR entity)
		{
			this.SendPropertyChanging();
			entity.BOOK = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BOOK_AUTHOR")]
	public partial class BOOK_AUTHOR : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _Book_ID;
		
		private int _Author_ID;
		
		private EntityRef<AUTHOR> _AUTHOR;
		
		private EntityRef<BOOK> _BOOK;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnBook_IDChanging(int value);
    partial void OnBook_IDChanged();
    partial void OnAuthor_IDChanging(int value);
    partial void OnAuthor_IDChanged();
    #endregion
		
		public BOOK_AUTHOR()
		{
			this._AUTHOR = default(EntityRef<AUTHOR>);
			this._BOOK = default(EntityRef<BOOK>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Book_ID", DbType="Int NOT NULL")]
		public int Book_ID
		{
			get
			{
				return this._Book_ID;
			}
			set
			{
				if ((this._Book_ID != value))
				{
					if (this._BOOK.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBook_IDChanging(value);
					this.SendPropertyChanging();
					this._Book_ID = value;
					this.SendPropertyChanged("Book_ID");
					this.OnBook_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Author_ID", DbType="Int NOT NULL")]
		public int Author_ID
		{
			get
			{
				return this._Author_ID;
			}
			set
			{
				if ((this._Author_ID != value))
				{
					if (this._AUTHOR.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAuthor_IDChanging(value);
					this.SendPropertyChanging();
					this._Author_ID = value;
					this.SendPropertyChanged("Author_ID");
					this.OnAuthor_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AUTHOR_BOOK_AUTHOR", Storage="_AUTHOR", ThisKey="Author_ID", OtherKey="Author_ID", IsForeignKey=true)]
		public AUTHOR AUTHOR
		{
			get
			{
				return this._AUTHOR.Entity;
			}
			set
			{
				AUTHOR previousValue = this._AUTHOR.Entity;
				if (((previousValue != value) 
							|| (this._AUTHOR.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AUTHOR.Entity = null;
						previousValue.BOOK_AUTHORs.Remove(this);
					}
					this._AUTHOR.Entity = value;
					if ((value != null))
					{
						value.BOOK_AUTHORs.Add(this);
						this._Author_ID = value.Author_ID;
					}
					else
					{
						this._Author_ID = default(int);
					}
					this.SendPropertyChanged("AUTHOR");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BOOK_BOOK_AUTHOR", Storage="_BOOK", ThisKey="Book_ID", OtherKey="Book_ID", IsForeignKey=true)]
		public BOOK BOOK
		{
			get
			{
				return this._BOOK.Entity;
			}
			set
			{
				BOOK previousValue = this._BOOK.Entity;
				if (((previousValue != value) 
							|| (this._BOOK.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BOOK.Entity = null;
						previousValue.BOOK_AUTHORs.Remove(this);
					}
					this._BOOK.Entity = value;
					if ((value != null))
					{
						value.BOOK_AUTHORs.Add(this);
						this._Book_ID = value.Book_ID;
					}
					else
					{
						this._Book_ID = default(int);
					}
					this.SendPropertyChanged("BOOK");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.GENRE")]
	public partial class GENRE : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Genre_ID;
		
		private string _Genre_Name;
		
		private EntitySet<BOOK> _BOOKs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGenre_IDChanging(int value);
    partial void OnGenre_IDChanged();
    partial void OnGenre_NameChanging(string value);
    partial void OnGenre_NameChanged();
    #endregion
		
		public GENRE()
		{
			this._BOOKs = new EntitySet<BOOK>(new Action<BOOK>(this.attach_BOOKs), new Action<BOOK>(this.detach_BOOKs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Genre_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Genre_ID
		{
			get
			{
				return this._Genre_ID;
			}
			set
			{
				if ((this._Genre_ID != value))
				{
					this.OnGenre_IDChanging(value);
					this.SendPropertyChanging();
					this._Genre_ID = value;
					this.SendPropertyChanged("Genre_ID");
					this.OnGenre_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Genre_Name", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Genre_Name
		{
			get
			{
				return this._Genre_Name;
			}
			set
			{
				if ((this._Genre_Name != value))
				{
					this.OnGenre_NameChanging(value);
					this.SendPropertyChanging();
					this._Genre_Name = value;
					this.SendPropertyChanged("Genre_Name");
					this.OnGenre_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GENRE_BOOK", Storage="_BOOKs", ThisKey="Genre_ID", OtherKey="Genre_ID")]
		public EntitySet<BOOK> BOOKs
		{
			get
			{
				return this._BOOKs;
			}
			set
			{
				this._BOOKs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BOOKs(BOOK entity)
		{
			this.SendPropertyChanging();
			entity.GENRE = this;
		}
		
		private void detach_BOOKs(BOOK entity)
		{
			this.SendPropertyChanging();
			entity.GENRE = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PUBLISHER")]
	public partial class PUBLISHER : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Publisher_ID;
		
		private string _Publisher_Name;
		
		private string _Publisher_Address;
		
		private EntitySet<BOOK> _BOOKs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPublisher_IDChanging(int value);
    partial void OnPublisher_IDChanged();
    partial void OnPublisher_NameChanging(string value);
    partial void OnPublisher_NameChanged();
    partial void OnPublisher_AddressChanging(string value);
    partial void OnPublisher_AddressChanged();
    #endregion
		
		public PUBLISHER()
		{
			this._BOOKs = new EntitySet<BOOK>(new Action<BOOK>(this.attach_BOOKs), new Action<BOOK>(this.detach_BOOKs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Publisher_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Publisher_ID
		{
			get
			{
				return this._Publisher_ID;
			}
			set
			{
				if ((this._Publisher_ID != value))
				{
					this.OnPublisher_IDChanging(value);
					this.SendPropertyChanging();
					this._Publisher_ID = value;
					this.SendPropertyChanged("Publisher_ID");
					this.OnPublisher_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Publisher_Name", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Publisher_Name
		{
			get
			{
				return this._Publisher_Name;
			}
			set
			{
				if ((this._Publisher_Name != value))
				{
					this.OnPublisher_NameChanging(value);
					this.SendPropertyChanging();
					this._Publisher_Name = value;
					this.SendPropertyChanged("Publisher_Name");
					this.OnPublisher_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Publisher_Address", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Publisher_Address
		{
			get
			{
				return this._Publisher_Address;
			}
			set
			{
				if ((this._Publisher_Address != value))
				{
					this.OnPublisher_AddressChanging(value);
					this.SendPropertyChanging();
					this._Publisher_Address = value;
					this.SendPropertyChanged("Publisher_Address");
					this.OnPublisher_AddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PUBLISHER_BOOK", Storage="_BOOKs", ThisKey="Publisher_ID", OtherKey="Publisher_ID")]
		public EntitySet<BOOK> BOOKs
		{
			get
			{
				return this._BOOKs;
			}
			set
			{
				this._BOOKs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BOOKs(BOOK entity)
		{
			this.SendPropertyChanging();
			entity.PUBLISHER = this;
		}
		
		private void detach_BOOKs(BOOK entity)
		{
			this.SendPropertyChanging();
			entity.PUBLISHER = null;
		}
	}
}
#pragma warning restore 1591
